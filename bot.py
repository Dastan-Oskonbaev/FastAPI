import json
import os

from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

openai_api_key=os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=openai_api_key)

conversation_history = []

system_prompt = {
    "role": "system",
    "content": (
        "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –ª–∏—á–Ω–æ—Å—Ç–∏. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º, –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö, –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ö–æ–±–±–∏, —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∂–µ–ª–∞–µ–º–æ–º –æ–±—Ä–∞–∑–µ. "
        "–ó–∞–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –¥–æ–∂–∏–¥–∞–π—Å—è –æ—Ç–≤–µ—Ç–∞, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π. "
        "–ó–∞–¥–∞–π –∫–∞–∫ –º–∏–Ω–∏–º—É–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤"
        "–ö–æ–≥–¥–∞ —É–∑–Ω–∞–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é summarize_user_profile –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."
    )
}

functions = [
    {
        "name": "summarize_user_profile",
        "description": "–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è",
        "parameters": {
            "type": "object",
            "properties": {
                "qa_pairs": {
                    "type": "array",
                    "description": "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤ —Ö–æ–¥–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
                    "items": {
                        "type": "object",
                        "properties": {
                            "question": {"type": "string"},
                            "answer": {"type": "string"}
                        },
                        "required": ["question", "answer"]
                    }
                }
            },
            "required": ["qa_pairs"]
        }
    }
]

def call_gpt(messages):
    response = client.chat.completions.create(model="gpt-4",
    messages=messages,
    functions=functions,
    function_call="auto")
    return response

messages = [system_prompt]

print("üëã GPT-–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!\n")

while True:
    response = call_gpt(messages)
    message = response.choices[0].message

    if hasattr(message, "function_call") and message.function_call is not None:
        print("\n‚úÖ GPT —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–∞–º–º–∞—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç–∏...\n")
        function_name = message.function_call.name
        arguments = json.loads(message.function_call.arguments)

        if function_name == "summarize_user_profile":
            summary_prompt = {
                "role": "system",
                "content": (
                    "–¢—ã –ø–∏—à–µ—à—å –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤—å—é. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å, –±—É–¥—Ç–æ —Ç—ã –ø—Ä–µ–∑–µ–Ω—Ç—É–µ—à—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞. "
                    "–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Å–≤—è–∑–Ω—ã–º –∏ –∂–∏–≤—ã–º, —É–ø–æ–º–∏–Ω–∞—è –∫–ª—é—á–µ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: –∫—Ç–æ –æ–Ω, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è, —á—Ç–æ —Ü–µ–Ω–∏—Ç, –∫–∞–∫ —Ö–æ—á–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –∏ —Ç.–¥."
                )
            }

            qa_text = "\n".join([f"{item['question']}\n–û—Ç–≤–µ—Ç: {item['answer']}" for item in arguments["qa_pairs"]])

            followup = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    summary_prompt,
                    {"role": "user", "content": qa_text}
                ]
            )

            final_summary = followup.choices[0].message
            print("üß† –°–∞–º–º–∞—Ä–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞:\n")
            print(final_summary)
            break

    question = message.content
    print(f"ü§ñ GPT: {question}")
    answer = input("üß† –¢—ã: ")

    messages.append({"role": "assistant", "content": question})
    messages.append({"role": "user", "content": answer})
